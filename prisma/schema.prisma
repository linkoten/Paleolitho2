// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  clerkUserId      String?        @unique
  stripeCustomerId String?        @unique
  subscription     Subscription[]
  notes            Notes[]
  cart             Cart? // Relation to Cart
  favorites        Favorite[] // Relation to Favorite
  ratings          Rating[] // Relation to Rating
  role             Role           @default(USER)
  orders           Order[] // Relation to Order
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  coverImage String
  excerpt    String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
}

model Notes {
  id          String   @id @unique @default(cuid())
  title       String?
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Products {
  id           String      @id @unique @default(cuid())
  title        String?
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  price        Int
  stock        Int
  images       String[]
  category     String
  country      String
  locality     String
  period       String
  stages       String
  weight       Int?
  globalRating Int[]
  favorites    Favorite[] // Relation to Favorite
  ratings      Rating[] // Relation to Rating
  CartItems    CartItem[]
  orderItems   OrderItem[] // Relation to OrderItem
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  product   Products @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id]) // Relation to Cart

  @@unique([cartId, productId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  favorite  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  email           String
  amount          Int
  status          String      @default("pending") // pending, paid, shipped, delivered, cancelled
  products        String // JSON string of product details (for historical record)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[] // Relation to OrderItem
  shippingAddress String? // Optional shipping address
  trackingNumber  String? // Optional tracking number for shipping
  stripeSessionId String? // Ajout du champ stripeSessionId (optionnel)
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Products @relation(fields: [productId], references: [id])
  quantity        Int
  priceAtPurchase Int // Store price at time of purchase

  @@unique([orderId, productId])
}

enum Role {
  USER
  ADMIN
}
